"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
exports.__esModule = true;
exports.getActionsQuery = exports.resetDeletionNodes = exports.deleteNodes = void 0;
var client_1 = require("@apollo/client");
exports.deleteNodes = client_1.gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    mutation nodeDelete($ids: [ID!]!, $authorization: [String!]) {\n        deleteContentOrCluster(\n            input: { ids: $ids, authorization: $authorization }\n        ) {\n            latestDeletion\n        }\n    }\n"], ["\n    mutation nodeDelete($ids: [ID!]!, $authorization: [String!]) {\n        deleteContentOrCluster(\n            input: { ids: $ids, authorization: $authorization }\n        ) {\n            latestDeletion\n        }\n    }\n"])));
exports.resetDeletionNodes = client_1.gql(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    mutation nodeResetDelete($ids: [ID!]!, $authorization: [String!]) {\n        resetDeletionContentOrCluster(\n            input: { ids: $ids, authorization: $authorization }\n        ) {\n            restored\n        }\n    }\n"], ["\n    mutation nodeResetDelete($ids: [ID!]!, $authorization: [String!]) {\n        resetDeletionContentOrCluster(\n            input: { ids: $ids, authorization: $authorization }\n        ) {\n            restored\n        }\n    }\n"])));
exports.getActionsQuery = client_1.gql(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    query nodeGetActions($id: ID!, $authorization: [String!]) {\n        secretgraph(authorization: $authorization) {\n            config {\n                id\n                hashAlgorithms\n            }\n            node(id: $id) {\n                ... on Cluster {\n                    availableActions {\n                        id\n                        keyHash\n                        type\n                        requiredKeys\n                        allowedTags\n                    }\n                }\n                ... on Content {\n                    availableActions {\n                        id\n                        keyHash\n                        type\n                        requiredKeys\n                        allowedTags\n                    }\n                }\n            }\n        }\n    }\n"], ["\n    query nodeGetActions($id: ID!, $authorization: [String!]) {\n        secretgraph(authorization: $authorization) {\n            config {\n                id\n                hashAlgorithms\n            }\n            node(id: $id) {\n                ... on Cluster {\n                    availableActions {\n                        id\n                        keyHash\n                        type\n                        requiredKeys\n                        allowedTags\n                    }\n                }\n                ... on Content {\n                    availableActions {\n                        id\n                        keyHash\n                        type\n                        requiredKeys\n                        allowedTags\n                    }\n                }\n            }\n        }\n    }\n"])));
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=node.js.map