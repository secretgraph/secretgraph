#! /usr/bin/python

import argparse
import re
import subprocess
from pathlib import Path
from shutil import rmtree

parser = argparse.ArgumentParser()
parser.add_argument("--without-clean", "-n", action="store_true")
parser.add_argument("--without-git", "-g", action="store_true")

queryextractor = re.compile(r"(\w+) *= *gql`([^`]+)`", flags=re.MULTILINE)

BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
queries_dest_path = BASE_DIR / "secretgraph" / "queries"
queries_src_path = BASE_DIR / "js-packages" / "graphql-queries" / "src"


def main(argv=None):
    args = parser.parse_args(argv)
    if not args.without_clean:
        rmtree(queries_dest_path, ignore_errors=True)
    # queries_dest_path.mkdir()
    for file in queries_src_path.glob("**/*.ts"):
        bdir = (queries_dest_path / file.relative_to(queries_src_path)).parent
        bdir.mkdir(exist_ok=True, parents=True)
        newfilecontent = """# WARNING AUTOGENERATED"""
        for match in queryextractor.finditer(file.read_text()):
            newfilecontent = (
                f'{newfilecontent}\n\n{match[1]} = """{match[2]}"""'
            )
        nfile = bdir / f"{file.stem}.py"
        nfile.write_text(newfilecontent)
    if not args.without_git:
        subprocess.run(["git", "add", str(queries_dest_path)])


if __name__ == "__main__":
    main()
